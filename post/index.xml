<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CielRouge</title>
    <link>https://cielrouge.github.io/post/</link>
    <description>Recent content in Posts on CielRouge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 10 Sep 2018 21:44:08 +0800</lastBuildDate>
    
	<atom:link href="https://cielrouge.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>整理: State</title>
      <link>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86state/</link>
      <pubDate>Mon, 10 Sep 2018 21:44:08 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86state/</guid>
      <description>newtype State s a = State {runState :: s -&amp;gt; (a , s)} newtype (State s) a = State {runState :: s -&amp;gt; (a , s)} -- runState :: State s a -&amp;gt; s -&amp;gt; (a , s) -- State $ \s -&amp;gt; (a , s) = (State s) ainstance Functor (State s) where fmap f m = State $ \s -&amp;gt; case runState m s of (r , s) -&amp;gt; (f r , s) 类型推导 f :: a -&amp;gt; b m :: (State s) a runState :: State s a -&amp;gt; s -&amp;gt; (a , s) runState :: (State s) a -&amp;gt; (s -&amp;gt; (a , s)) runState m s = runState ((State s) a) s = (a , s) = (r , s) \s -&amp;gt; (f r , s) :: \s -&amp;gt; ((a -&amp;gt; b) a , s) :: \s -&amp;gt; (b , s) State $ s -&amp;gt; (b , s)  instance Applicative (State s) where pure x = State $ \s -&amp;gt; (x , s) m &amp;lt;*&amp;gt; n = State $ \s -&amp;gt; case runState m s of (f , s&amp;#39;) -&amp;gt; case runState n s&amp;#39; of (x , s&amp;#39;&amp;#39;) -&amp;gt; (f x , s&amp;#39;&amp;#39;)  类型推导 pure x :: (State s) x State $ \s -&amp;gt; (x , s) = (State s) x &amp;lt;*&amp;gt; :: f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b &amp;lt;*&amp;gt; :: (State s) (a -&amp;gt; b) -&amp;gt; (State s) a -&amp;gt; (State s) b m :: (State s) (a -&amp;gt; b) :: (State s) a -&amp;gt; (State s) b n :: (State s) a runState n s&#39; = (x , s&#39;&#39;) :: (State s) a -&amp;gt; s -&amp;gt; (a , s) runState m s = (f , s&#39;) -&amp;gt; (f x , s&#39;&#39;) :: (State s) (a -&amp;gt; b) -&amp;gt; s -&amp;gt; (a , s) -&amp;gt; (b , s)  instance Monad (State s) where m &amp;gt;&amp;gt; n = State $ \s -&amp;gt; case runState m s of (r , s&amp;#39;) -&amp;gt; runState (n r) s&amp;#39; 类型推导 (&amp;gt;&amp;gt;=) :: m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b m :: (State s) a n :: (a -&amp;gt; (State s) b) runState (n r) s&#39; :: (State s) b  get :: State s s get = State $ \s -&amp;gt; (# s, s #) gets :: (s -&amp;gt; a) -&amp;gt; State s a gets f = State $ \s -&amp;gt; (# f s, s #) put :: s -&amp;gt; State s () put s&amp;#39; = State $ \_ -&amp;gt; (# (), s&amp;#39; #) modify :: (s -&amp;gt; s) -&amp;gt; State s () modify f = State $ \s -&amp;gt; (# (), f s #) evalState :: State s a -&amp;gt; s -&amp;gt; a evalState s i = case runState&amp;#39; s i of (# a, _ #) -&amp;gt; a execState :: State s a -&amp;gt; s -&amp;gt; s execState s i = case runState&amp;#39; s i of (# _, s&amp;#39; #) -&amp;gt; s&amp;#39; runState :: State s a -&amp;gt; s -&amp;gt; (a, s) runState s i = case runState&amp;#39; s i of (# a, s&amp;#39; #) -&amp;gt; (a, s&amp;#39;) ST examples &amp;gt;&amp;gt;&amp;gt; :{ runST (do ref &amp;lt;- newSTRef &amp;#34;hello&amp;#34; x &amp;lt;- readSTRef ref writeSTRef ref (x ++ &amp;#34;world&amp;#34;) readSTRef ref ) :} &amp;#34;helloworld&amp;#34; &amp;gt;&amp;gt;&amp;gt; :{ runST (do ref &amp;lt;- newSTRef &amp;#34;&amp;#34; modifySTRef ref (const &amp;#34;world&amp;#34;) modifySTRef ref (++ &amp;#34;!</description>
    </item>
    
    <item>
      <title>Note180910</title>
      <link>https://cielrouge.github.io/post/note180910/</link>
      <pubDate>Mon, 10 Sep 2018 19:43:09 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/note180910/</guid>
      <description>$K$: field, $A$: $K$-algebra
(Schur) 简单A-模:V 在 K-代数:A 上的自同态群:$End_A(V)$ 是含K的反对称体.
(对一个交换环: K，一个K-代数: A，一个A-模: M， End_A(M)是K-代数，Aut_A(M)是它的单位群.)</description>
    </item>
    
    <item>
      <title>整理:Functor</title>
      <link>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86functor/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86functor/</guid>
      <description>Functor Functors: uniform action over a parameterized type
在「参数化的type」上的「一致action」
在「列表」上的「map函数」的一般化
Functor: 可被map-over的types的class
“对type 可被action做map 的形容”
fmap (f . g) == fmap f . fmap g
(&amp;lt;$&amp;gt;) -- fmap
(&amp;lt;&amp;amp;&amp;gt;) -- flip fmap
Applicative a functor with application
对type 可被 有sequential application的uniform action 做map 的形容
fmap f x = pure f &amp;lt;*&amp;gt; x
fmap f x = &amp;lt;*&amp;gt; (pure f) x
-- f :: a -&amp;gt; b
-- pure f :: Applicative (a -&amp;gt; b)</description>
    </item>
    
    <item>
      <title>Note180909</title>
      <link>https://cielrouge.github.io/post/note180909/</link>
      <pubDate>Sun, 09 Sep 2018 16:00:14 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/note180909/</guid>
      <description>(Krull-Schimidt)
($K$是域，$A$是$K$-代数，$M$是Noetherian且artinian的$A$-模.)
若有不可分解的A-模：$M_1,M_2,&amp;hellip;,M_m$ 与 $N_1,N_2,&amp;hellip;,N_n$ s.t. $\bigoplus_{j=1}^m M_j = M = \bigoplus_{i=1}^n N_i$
则 $\exists \sigma \in \mathfrak{S}_n$, s.t. $M_j \simeq N_{\sigma(j)}$
(Fitting)
对每一个自同态，存在一个模的分解，使这个自同态限制在一部分上是幂零自同态，限制在在另一部份上是自同构.($M$是Noetherian且artinian的$A$-模.)
$\forall u$ (endomorphism of M), $\exists M\simeq N\oplus S$ s.t.
$u\vert N$ is nilpotent endomorphism of N.
$u\vert S$ is automorphism of S.
may take $N=ker(u^m), S=im(u^m)$ (for m large enough)
local: 环的不可逆元的集合是一个双边理想.
$M$是非零不可分$A$模 =&amp;gt;
$End_A(M)$是一个局部环.
$M$的每个自同态either幂零or双射.
(M -&amp;gt; N -&amp;gt; M)是同构, 且N不可分, 则(M -&amp;gt; N), (N -&amp;gt; M)都是同构.</description>
    </item>
    
    <item>
      <title>Note180904</title>
      <link>https://cielrouge.github.io/post/note180904/</link>
      <pubDate>Tue, 04 Sep 2018 00:27:29 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/note180904/</guid>
      <description>($K$:交换环, $A$:$K$-代数 $M$:$A$-模)
$M$ is Noetherian:
$\exists M_1\subseteq M_2\subseteq &amp;hellip; \subseteq M$ $\quad$ =&amp;gt;
$\exists n_0\in \mathbb{N}$ s.t. $M_n=M_{n_0}, \forall n \geq n_0$
$M$ is artinian:
$\exists M\supseteq M_1 \supseteq M_2 \supseteq &amp;hellip;$ $\quad$ =&amp;gt;
$\exists n_0\in \mathbb{N}$ s.t. $M_n=M_{n_0}, \forall n \geq n_0$
若$A$是域$K$上代数, 则任意有限维$A$-模作为$K$-向量空间, is Noetherian and artinian.
($A$:环, $M$: $A$上左模)
等价命题： 1. $M$ is Noetherian
2. $M$的所有子模都是有限生成的
3. 对$M$的任意子模$N$, $N$与$M/N$ are Noetherian
 1=&amp;gt;2:
设$N$是$M$的子模, $N$的生成集: $\lbrace m_i \vert i\in I\rbrace$ ($I$ is not finite)</description>
    </item>
    
    <item>
      <title>Note180902</title>
      <link>https://cielrouge.github.io/post/note180902/</link>
      <pubDate>Sun, 02 Sep 2018 22:53:51 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/note180902/</guid>
      <description>($G$是$n$阶有限群, $K$是域, 若$n\cdot K=K$, 则$KG$的任意模is semisimple):
(Maschke) 若有限群$G$的阶数$\vert G\vert$在域$K$中可逆, 则$KG$ is semisimple.
 任意$KG$-模$M$, 任意$M$子模$N$, 存在$M$子模$L$ s.t. $M\simeq N\oplus L$:
设$N$是$M$非零子模, $\tilde{L}:=M/N$,
$\pi:M\to\tilde{L},m\mapsto m+N$,
$K$-线性映射:$\tilde{\rho}:\tilde{L}\to M, l+N\mapsto l,\forall l\in \mathcal{L}$.
$\pi \circ \tilde{\rho}=id_{\tilde{L}}$, $\pi$是$KG$-模同态, $\tilde{\rho}$未必
定义: $\rho: \tilde{L}\to M, l+N\mapsto \frac{1}{\vert G\vert}\sum_{g\in G}e_g^{-1} \tilde{\rho}(e_g\cdot (l+N))$
$\because \vert G\vert$在$K$中可逆, $\therefore \frac{1}{\vert G\vert}\in K$
$\pi \circ \rho=id_{\tilde{L}}$
$\forall l+N\in \tilde{L}, \forall h\in G, \rho(e_h \cdot (l+N))=e_h\cdot \rho(l+N)$ =&amp;gt;
$\rho$是$KG$-模同态, $L:=im(\rho)$是$M$的$KG$-子模.
 ($R$是交换环, $A$是$R$-代数, $M$是$A$-模)</description>
    </item>
    
    <item>
      <title>Note180901</title>
      <link>https://cielrouge.github.io/post/note180901/</link>
      <pubDate>Sat, 01 Sep 2018 11:40:28 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/note180901/</guid>
      <description>(以下环均指交换幺环)
Hibert&amp;rsquo;s Nullstellensatz:
(几何对象)仿射簇 $\leftrightarrow$ (代数对象)一个多项式环的根理想
坐标环:
被assign到一个仿射簇的仿射代数
代数 有限生成 iff
同构于$R[x_1,\cdots ,x_n]/I$.
仿射K_代数:
域K上的有限生成代数
(A是域K上的一个代数)
A是整环，且在域K上algebraic =&amp;gt; A是域.
A是域，且在一个仿射K-整环中 =&amp;gt; A is algebraic.
 $A\cong K[x]/I$
$A$是整环 =&amp;gt; $I$是素理想, $A$在$K$上algebraic =&amp;gt; $I$非零.
$K[x]$是主理想整环, $I=(f)$ ($f\in K[x]$不可约), $I$是最大理想.
 
(A-&amp;gt;B是域K上的代数同态)
若B 有限生成,
则B中最大理想在A中的 原像也是最大理想.
($K$是域, $P=(\xi_1,&amp;hellip;,\xi_n)\in K^n$)
$\mathfrak{m}_P:=(x_1 -\xi_1,&amp;hellip;,x_n-\xi_n)$
是$K[x_1,&amp;hellip;,x_n]$的一个最大理想.
 $\forall f\in K[x_1,&amp;hellip;,x_n]$ 同余$f(\xi_1,&amp;hellip;,\xi_n)$ modulo $\mathfrak{m}_P$ =&amp;gt;
$\mathfrak{m}_P$是$\phi:K[x_1,&amp;hellip;,x_n]\to K, f\mapsto f(\xi_1,&amp;hellip;,\xi_n)$的核 =&amp;gt;
$K[x_1,&amp;hellip;,x_n]/\mathfrak{m}_P\cong K$.
 
(一个代数闭域上的 一个多项式环的 所有最大理想:)</description>
    </item>
    
    <item>
      <title>Note180830</title>
      <link>https://cielrouge.github.io/post/note180830/</link>
      <pubDate>Thu, 30 Aug 2018 10:47:24 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/note180830/</guid>
      <description>K-代数：
一个 环结构(A)
一个 交换环(K)到 环结构的中心 的环同态
两个K-代数的 环结构之间的环同态: A -&amp;gt; B
是代数同态，if
是两个K-代数的 结构态射之间的态射: (K -&amp;gt; A) -&amp;gt; (K -&amp;gt; B)
($\forall \lambda \in K,\forall a \in A,\phi (\lambda \cdot a)=\lambda\cdot\phi (a)$)
(left A-module M:
an abelian group with a mapping $\mu: A\times M\to M$)
(K: 交换环, A: K-代数, M: K-模)
M是A-模 =&amp;gt; 有K-代数同态 $\lambda :A\to End_K (M)$.
给定K-代数同态$\nu: A\to End_K(M)$ =&amp;gt; M上有唯一A-模结构，使$A\to End_K(M)$是$\nu$.
 对each $a\in A$, 定义$\underline{\lambda_a:M\to M}$, $\lambda_a:m\mapsto \mu (a,m) =: a\cdot m$.</description>
    </item>
    
  </channel>
</rss>