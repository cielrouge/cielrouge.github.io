<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CielRouge</title>
    <link>https://cielrouge.github.io/post/</link>
    <description>Recent content in Posts on CielRouge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 06 Oct 2018 23:19:48 +0800</lastBuildDate>
    
	<atom:link href="https://cielrouge.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2018-10-06</title>
      <link>https://cielrouge.github.io/post/181006/</link>
      <pubDate>Sat, 06 Oct 2018 23:19:48 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/181006/</guid>
      <description>证明什么证明？定理在搞什么都不知道证明什么证明？
理解符号指意就是理解定理了？不知道定理的适用场景你能知道这一套复杂符号系统是作为什么的解决工具？
完美无缺的纯洁符号系统告诉你范畴里有对象和态射，完美无缺的符号系统能告诉你做什么要从一个范畴的对象用函子射到另一个范畴的对象上？换个范畴，对象射对象，干啥呢？？
知晓每一步的精巧算计，在每一步都不管上一步的线索与动机。明明应该用链表，非要用数组。
思考问题是不可替代的。没有一种动机可以从阅读中获得。
没有一种理解可以先于思考，解答与问题之间有着空白断裂的工具索引与场景。
没有创造的读解，没有索引的工具，没有问题的解答，没有动机的优化。
时间的空白洗去记忆，而索引与作品留下了。
&amp;ldquo;the first is that we have not felt compelled to give the proofs of all the theorems.&amp;rdquo;
&amp;ldquo;the second is that we have not always stated results in the maximum generality.&amp;rdquo;
&amp;ldquo;the third is that we have hewed to the axiomatic foundations of the subject.&amp;rdquo;
2018-10-06</description>
    </item>
    
    <item>
      <title>Note: VisualizingOneManifold</title>
      <link>https://cielrouge.github.io/post/note-visualizingonemanifold/</link>
      <pubDate>Sun, 30 Sep 2018 18:27:05 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/note-visualizingonemanifold/</guid>
      <description>Geometric Topology &amp;amp; Visualizing 1-Manifolds
环境同痕逼近 for 几何对象在$R^3$中的嵌入的表示.
高效可视化算法两个准则:
1. 逐段线性(PL)逼近，保持模型的拓扑
2. 动态变化中的拓扑保持
对参数1-流形的 曲率适应、拓扑保持 的逼近.
逐段线性(PL)逼近:
1. 拓扑等价于原来的流形
2. 最小化线性逼近的数量
3. 接受用户指定的距离与曲率的误差边界
为动态分子可视化选择的拓扑等价来自ambient isotopy，保持了时间变化中几何模型的嵌入.
Definition 1.
$X$, $Y$是$R^n$的子集. ambient isotopy 是一个连续函数 $H: R^n \times [0,1] \to R^n$ s.t.
1. $H(\cdot,0)$ 是identity函数
2. $H(X,1)=Y$
3. $\forall t \in [0,1]$, $H(\cdot, t)$ 是$R^3$上同胚。
参数1-流形的曲率和拓扑 记号: $c: [0,1]\to R^3$是$C^3$曲线，记
$$\mu_c([a,b]) = \int_a^b \parallel c&amp;rdquo;(t)\parallel dt$$
Theorem 1.
$c: [0,1]\to R^3$是$C^3$曲线. 对each $\epsilon &amp;gt; 0$, $\exists n \in \mathbb{N}$, $\exists$ partition $X = \lbrace p_1, &amp;hellip;, p_n \rbrace \subset [0,1]$ s.</description>
    </item>
    
    <item>
      <title>Note: LeafVenation</title>
      <link>https://cielrouge.github.io/post/note-leafvenation/</link>
      <pubDate>Mon, 24 Sep 2018 16:17:02 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/note-leafvenation/</guid>
      <description>Adam Runions, Martin Fuhrer, Brendan Lane, Pavol Federl, Anne−Gaëlle Rolland−Lagan, and Przemyslaw Prusinkiewicz. Modeling and visualization of leaf venation patterns. ACM Transactions on Graphics 24(3), pp. 702−711.
过程：1.叶脉向叶片的生长素源的发展. 2.根据与叶脉的近邻程度，调节生长素源分布. 3.根据叶片的生长，调节叶脉模式与源分布.
代表叶脉节点与生长素源的点集上，迭代几何运算.
保存一个叶脉连接图，以决定叶脉宽度.
生长的特征：growth tensor
极小曲面区域在各方向展开的量级，可能包含各区域的一个可能的旋转.
生长张量是 相对初等生长率(RERG) 的一般化.
RERG: 生长对象上$p$点处，线$l$的方向上测得的，极小距离随时间增长的速率.
此速率依据极小距离$\Delta s$正规化得:
$RERG_l(p) = (1/\Delta s)(d \Delta /dt)$
marginal: concentrated on the border
diffuse: spread throught the surface
isotropic: diffuse growth, expansion equal in all directions
uniform: growth tensor is the same at all points of the surface</description>
    </item>
    
    <item>
      <title>整理: fold,traverse</title>
      <link>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86foldtraverse/</link>
      <pubDate>Tue, 11 Sep 2018 13:07:50 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86foldtraverse/</guid>
      <description>Foldable data Tree a = Empty | Leaf a | Node (Tree a) a (Tree a) instance Foldable Tree where foldMap f Empty = mempty foldMap f (Leaf x) = f x foldMap f (Node l k r) = foldMap f l `mappend` f k `mappend` foldMap f rclass Foldable t where foldMap :: Monoid m =&amp;gt; (a -&amp;gt; m) -&amp;gt; t a -&amp;gt; m foldMap f = foldr (mappend .</description>
    </item>
    
    <item>
      <title>整理: State, Reader</title>
      <link>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86state/</link>
      <pubDate>Mon, 10 Sep 2018 10:09:19 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86state/</guid>
      <description>State newtype State s a = State {runState :: s -&amp;gt; (a , s)} newtype (State s) a = State {runState :: s -&amp;gt; (a , s)} -- runState :: State s a -&amp;gt; s -&amp;gt; (a , s) -- State $ \s -&amp;gt; (a , s) = (State s) ainstance Functor (State s) where fmap f m = State $ \s -&amp;gt; case runState m s of (r , s) -&amp;gt; (f r , s)instance Applicative (State s) where pure x = State $ \s -&amp;gt; (x , s) m &amp;lt;*&amp;gt; n = State $ \s -&amp;gt; case runState m s of (f , s&amp;#39;) -&amp;gt; case runState n s&amp;#39; of (x , s&amp;#39;&amp;#39;) -&amp;gt; (f x , s&amp;#39;&amp;#39;) instance Monad (State s) where m &amp;gt;&amp;gt; n = State $ \s -&amp;gt; case runState m s of (r , s&amp;#39;) -&amp;gt; runState (n r) s&amp;#39; minimal complete definition:</description>
    </item>
    
    <item>
      <title>整理: Functor</title>
      <link>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86functor/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86functor/</guid>
      <description>map an element to an action. 元左乘 -&amp;gt; 一个自同态. 这样就好理解了.
Functor Functors: uniform action over a parameterized type
在「参数化的type」上的「一致action」
在「列表」上的「map函数」的一般化
Functor: 可被map-over的types的class
“对type 可被action做map 的形容”
fmap (f . g) == fmap f . fmap g
(&amp;lt;$&amp;gt;) -- fmap
(&amp;lt;&amp;amp;&amp;gt;) -- flip fmap
Applicative a functor with application
对type 可被 有sequential application的uniform action 做map 的形容
fmap f x = pure f &amp;lt;*&amp;gt; x
fmap f x = &amp;lt;*&amp;gt; (pure f) x</description>
    </item>
    
    <item>
      <title>RT-AHAPoV-Ch1</title>
      <link>https://cielrouge.github.io/post/%E8%A1%A8%E7%A4%BA%E8%AE%BA%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Thu, 30 Aug 2018 10:47:24 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/%E8%A1%A8%E7%A4%BA%E8%AE%BA%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description>$K$-代数：
一个环结构($A$)
一个交换环($K$)到环结构中心($Z(A)$)的环同态
代数同态:
环同态:$A$ -&amp;gt; $B$, 结构同态:($K$ -&amp;gt; $A$) -&amp;gt; ($K$ -&amp;gt; $B$)
$\forall \lambda \in K,\forall a \in A,\phi (\lambda \cdot a)=\lambda\cdot\phi (a)$)
(left $A$-module $M$:
an abelian group with a mapping $\mu: A\times M\to M$)
$M$是$A$-模 =&amp;gt; 有$K$-代数同态 $\lambda :A\to End_K (M)$.
给定$K$-代数同态$\nu: A\to End_K(M)$ =&amp;gt; $M$上有唯一$A$-模结构，使$A\to End_K(M)$是$\nu$.
 对each $a\in A$, 定义$\underline{\lambda_a:M\to M}$, $\lambda_a:m\mapsto \mu (a,m) =: a\cdot m$. （由A是$K$-代数，$K\to Z(A)$，证得$\lambda$的K-线性.）
对$\nu: A\to End_K(M)$, 定义$\mu:A\times M\to M$, $\mu (a,m):=\underline{\nu (a)(m)}$</description>
    </item>
    
  </channel>
</rss>