<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hs on CielRouge</title>
    <link>https://cielrouge.github.io/tags/hs/</link>
    <description>Recent content in Hs on CielRouge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 13 Nov 2018 13:26:40 +0800</lastBuildDate>
    
	<atom:link href="https://cielrouge.github.io/tags/hs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Note: pofad</title>
      <link>https://cielrouge.github.io/post/note-pofad/</link>
      <pubDate>Tue, 13 Nov 2018 13:26:40 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/note-pofad/</guid>
      <description>1 The smallest free number accumArray :: Ix i =&amp;gt; (e -&amp;gt; v -&amp;gt; e) -&amp;gt; e -&amp;gt; (i,i) -&amp;gt; [(i,v)] -&amp;gt; Array i e $\lbrack (i,v)\rbrack$ 是 associating list, v 是 value, 不同于 entry.
e 是 initial entry. (i,i) 是 index 的上下界. 对上下界之间的所有 index 初始化 entry.
不是所有 index 都在 associating list $\lbrack(i,v)\rbrack$ 中出现过.
有的 index 从 associating list 中得到了 value, 这个 value 不是在 array 中 index 对应的 entry.</description>
    </item>
    
    <item>
      <title>整理: State, Reader</title>
      <link>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86state/</link>
      <pubDate>Mon, 10 Sep 2018 10:09:19 +0800</pubDate>
      
      <guid>https://cielrouge.github.io/post/%E6%95%B4%E7%90%86state/</guid>
      <description>State newtype State s a = State {runState :: s -&amp;gt; (a , s)} newtype (State s) a = State {runState :: s -&amp;gt; (a , s)} -- runState :: State s a -&amp;gt; s -&amp;gt; (a , s) -- State $ \s -&amp;gt; (a , s) = (State s) ainstance Functor (State s) where fmap f m = State $ \s -&amp;gt; case runState m s of (r , s) -&amp;gt; (f r , s)instance Applicative (State s) where pure x = State $ \s -&amp;gt; (x , s) m &amp;lt;*&amp;gt; n = State $ \s -&amp;gt; case runState m s of (f , s&amp;#39;) -&amp;gt; case runState n s&amp;#39; of (x , s&amp;#39;&amp;#39;) -&amp;gt; (f x , s&amp;#39;&amp;#39;) instance Monad (State s) where m &amp;gt;&amp;gt; n = State $ \s -&amp;gt; case runState m s of (r , s&amp;#39;) -&amp;gt; runState (n r) s&amp;#39; minimal complete definition:</description>
    </item>
    
  </channel>
</rss>